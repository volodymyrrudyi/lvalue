%{
    #include "AST_Node.h"
    #include "AST_Block.h"
    #include "AST_Expression.h"
    #include "AST_ExpressionStatement.h"
    #include "AST_Statement.h"
    #include "AST_VariableDeclaration.h"
    #include "AST_FunctionDeclaration.h"
    #include "AST_BinaryOperator.h"
    #include "AST_FunctionCall.h"
    #include "AST_IfStatement.h"
    #include "AST_SimpleTypes.h"
    #include "AST_Identifier.h"

    #include <llvm/Instructions.h>
    
    using namespace lvalue;
    using namespace llvm;
    #include <cstdio>
    extern int yylex();
	LValue_Builder builder;
    void yyerror(const char *s) { printf("ERROR: %s\n", s); }
    
    Instruction::BinaryOps toBinaryOp(int op)
    {
    	switch(op)
    	{
    		case TPLUS:
    			return Instruction::Add;
    			break;
    		case TMINUS:
    			return Instruction::Sub;
    			break;
    		case TDIV:
    			return Instruction::SDiv;
    			break;
    		case TMUL:
    			return Instruction::Mul;
    			break;
    	}
    }
    
    
%}

/* Represents the many different ways we can access our data */
%union {
    AST_Node *node;
    AST_Block *block;
    AST_Expression *expr;
    AST_Statement *stmt;
    AST_Identifier *ident;
    AST_VariableDeclaration *var_decl;
    std::vector<AST_VariableDeclaration*> *varvec;
    std::vector<AST_Expression*> *exprvec;
    std::string *string;
    int token;
}


%token <string> TIDENTIFIER TINTEGER TDOUBLE TSTRING TIF TELSIF TELSE
%token <token> TCOLON TCEQ TCNE TCLT TCLE TCGT TCGE TEQUAL
%token <token> TDO TEND TLPAREN TRPAREN TLBRACE TRBRACE TCOMMA TDOT
%token <token> TDEF TPLUS TMINUS TMUL TDIV


%type <ident> ident
%type <expr> numeric expr
%type <varvec> func_decl_args
%type <exprvec> call_args
%type <block> program stmts block
%type <stmt> stmt var_decl func_decl if_stmt
%type <token> comparison

%left TPLUS TMINUS
%left TMUL TDIV

%start program
%%

program : stmts { builder.root = $1; }
        ;

stmts : stmt { $$ = new AST_Block(builder); $$->statements.push_back($<stmt>1); }
      | stmts stmt { $1->statements.push_back($<stmt>2); }
      ;

stmt : var_decl | func_decl | if_stmt
     | expr { $$ = new AST_ExpressionStatement(builder, *$1); }
     ;

block : TLBRACE stmts TRBRACE{ $$ = $2;}
      | TLBRACE TRBRACE { $$ = new AST_Block(builder);}
      ;

var_decl : ident ident { $$ = new AST_VariableDeclaration(builder, *$2, *$1); }
         | ident ident TEQUAL expr { $$ = new AST_VariableDeclaration(builder, *$2, *$1, $4); }
         ;

func_decl : TDEF ident TLPAREN func_decl_args TRPAREN TCOLON ident block
            { $$ = new AST_FunctionDeclaration(builder, *$7, *$2, *$4, *$8); delete $4; }
          ;

func_decl_args : /*blank*/  { $$ = new VariableList(); }
          | var_decl { $$ = new VariableList(); $$->push_back($<var_decl>1); }
          | func_decl_args TCOMMA var_decl { $1->push_back($<var_decl>3); }
          ;
if_stmt :   TIF TLPAREN expr TRPAREN block TELSE block {  $$ = new AST_IfStatement(builder, *$3, *$5, *$7); }
          | TIF TLPAREN expr TRPAREN block { }
          ;


ident : TIDENTIFIER { $$ = new AST_Identifier(builder, *$1); delete $1; }
      ;

numeric : TINTEGER { $$ = new AST_Integer(builder, atol($1->c_str())); delete $1; }
        | TDOUBLE { $$ = new AST_Double(builder, atof($1->c_str())); delete $1; }
        ;

expr : ident TEQUAL expr { $$ = new AST_Assignment(builder, *$<ident>1, *$3); }
     | ident TLPAREN call_args TRPAREN { $$ = new AST_FunctionCall(builder, *$1, *$3); delete $3; }
     | ident { $<ident>$ = $1; }
     | numeric
     | expr comparison expr { $$ = new AST_BinaryOperator(builder, *$1, toBinaryOp($2) , *$3); }
     | TLPAREN expr TRPAREN { $$ = $2; }
     ;

call_args : /*blank*/  { $$ = new ExpressionList(); }
          | expr { $$ = new ExpressionList(); $$->push_back($1); }
          | call_args TCOMMA expr  { $1->push_back($3); }
          ;

comparison : TCEQ | TCNE | TCLT | TCLE | TCGT | TCGE
           | TPLUS | TMINUS | TMUL | TDIV
           ;

%%
