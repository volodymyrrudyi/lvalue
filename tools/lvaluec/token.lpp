%{
#include <string>
#include "AST_Node.h"
#include "AST_Block.h"
#include "AST_Expression.h"
#include "AST_ExpressionStatement.h"
#include "AST_Statement.h"
#include "AST_VariableDeclaration.h"
#include "AST_FunctionDeclaration.h"
#include "AST_BinaryOperator.h"
#include "AST_FunctionCall.h"
#include "AST_IfStatement.h"
#include "AST_SimpleTypes.h"
#include "AST_Identifier.h"
using namespace llvm;
using namespace lvalue;
#include "parse.hpp"
#define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
#define TOKEN(t) (yylval.token = t)
extern "C" int yywrap() { return 1; }
%}

%%

[ \t\n]                 ;
"def"                   return TOKEN(TDEF);
"do"                    return TOKEN(TDO);
"end"                   return TOKEN(TEND);
"if"                    return TOKEN(TIF);
"elsif"                 return TOKEN(TELSIF);
"else"                  return TOKEN(TELSE);
[a-zA-Z_][a-zA-Z0-9_]*  SAVE_TOKEN; return TIDENTIFIER;
[0-9]+\.[0-9]*          SAVE_TOKEN; return TDOUBLE;
[0-9]+                  SAVE_TOKEN; return TINTEGER;
\"(\\.|[^\\"])*\"       SAVE_TOKEN; return TSTRING;
"="                     return TOKEN(TEQUAL);
"=="                    return TOKEN(TCEQ);
"!="                    return TOKEN(TCNE);
"<"                     return TOKEN(TCLT);
"<="                    return TOKEN(TCLE);
">"                     return TOKEN(TCGT);
">="                    return TOKEN(TCGE);
"("                     return TOKEN(TLPAREN);
")"                     return TOKEN(TRPAREN);
"{"                     return TOKEN(TLBRACE);
"}"                     return TOKEN(TRBRACE);
"."                     return TOKEN(TDOT);
","                     return TOKEN(TCOMMA);
"+"                     return TOKEN(TPLUS);
"-"                     return TOKEN(TMINUS);
"*"                     return TOKEN(TMUL);
"/"                     return TOKEN(TDIV);
":"                     return TOKEN(TCOLON);
.                       printf("Unknown token!\n"); yyterminate();

%%
